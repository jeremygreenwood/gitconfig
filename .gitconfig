[include]
    path = ~/.gitconfig-local
    # Note: the above file is intended to contain the following example info:
    #[user]
    #    name  = <your name>
    #    email = <your email>
    #    
    # Typical windows settings:
    #[core]
    #    # Note: if notepad++ is in a different directory, either edit the path below or create a link at the specified directory
    #    editor = \"C:/Program Files (x86)/Notepad++/notepad++.exe\" -multiInst -notabbar -nosession -noPlugin
    #    autocrlf = true
    
[alias]
    #---------------------------------------------------------------
    # Simple aliases
    #---------------------------------------------------------------
    a    = add
    ac	 = add ./*.c            # add all .c files in current directory and its subdirectories
    acpp = add ./*.cpp          # add all .cpp files in current directory and its subdirectories
    ah   = add ./*.h            # add all .h files in current directory and its subdirectories
    br   = branch
    bra  = branch --all
    brm  = branch --move
    co   = checkout
    cob  = checkout -b
    com  = checkout master
    cop  = checkout @{-1}
    ci   = commit
    cim  = commit -m
    ciam = commit --all -m
    cif  = commit --fixup=HEAD
    ciaf = commit --all --fixup=HEAD
    cis  = commit --squash=HEAD
    cias = commit --all --squash=HEAD
    cism = commit --squash=HEAD -m
    ciasm= commit --all --squash=HEAD -m
    cp   = cherry-pick
    cpn  = cherry-pick --no-commit
    d    = diff
    fa   = fetch --all
    fom  = fetch origin master
    lol  = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    lolm = log --graph --decorate --pretty=oneline --abbrev-commit HEAD master
    plo  = pull origin
    plom = pull origin master
    pso  = push origin
    psom = push origin master
    rb   = rebase
    rbi  = rebase --interactive
    rbim = rebase --interactive master
    rcim = commit --amend -m    # overwrite last commit message (recommit)
    rf   = checkout --          # reset file
    rhd  = reset --hard         # reset all changes
    ri   = reset --merge        # reset index
    ri2w = reset --mixed        # reset index to working tree
    rw   = checkout .           # reset working tree (perform from top of tree)
    rgreen     = !git ri        # reset alias, consistent with git bash coloring scheme
    rgreen2red = !git ri2w      # reset alias, consistent with git bash coloring scheme
    rred       = !git rw        # reset alias, consistent with git bash coloring scheme
    st   = status
    su   = submodule update
    sui  = submodule update --init
    suir = submodule update --init --recursive
    sur  = submodule update --recursive

    #---------------------------------------------------------------
    # Multi-command aliases
    #---------------------------------------------------------------
    # Add all tracked files to index and show git status
    au   = !git add --update && git status
    
    # Blame functionality- finds a given file path(s) and blames a single line or between a start and end line
    # Usage: git bl <filename> [start] [end]
    # Notes: this requires creating a symbolic link in user home directory pointing to repository file "blame.sh"
    #        this uses an incorrect directory from git bash if in a subdirectory from where git bash is launched
    bl   =  !sh -c '~/blame.sh $@' -
    
    # Commit a fixup of previous commit with informational message
    # Notes: this will set the commit to be "fixup" (automatically squashed without comments) when performing an interactive rebase
    cifm = !sh -c 'git commit --fixup=HEAD && LAST_COMMIT=$(git log -n 1 --format=%B) && git commit --amend -m \"$LAST_COMMIT\n\n${1}\"' -
    # Commit all tracked changes as a fixup of previous commit with informational message
    ciafm = !sh -c 'git add --update && git cifm \"${1}\"' -
	
    # Create a new branch with prefix of personal branch path
    cobp = !sh -c 'git checkout -b personal/greenwoodj/$@' -
	
    # Push current branch to origin repository
    psoc = !sh -c 'CUR_BRANCH=$(git rev-parse --abbrev-ref HEAD) && git push origin $CUR_BRANCH' -
	
    # Push current branch to origin repository and prefix with personal branch path
    psocp = !sh -c 'CUR_BRANCH=$(git rev-parse --abbrev-ref HEAD) && git push origin $CUR_BRANCH:personal/greenwoodj/$CUR_BRANCH' -
	
    # Reset Eclipse project files and show git status
    re   = !git reset .project .cproject && git checkout -- .project .cproject && git status
	
    # Update master branch and revert to current branch
    # Notes: this does not work when tree is dirty
    um   = !git fetch origin master && git checkout master && git pull origin master && git checkout @{-1}

[color]
    branch = auto
    diff   = auto
    ui     = auto
    
[color "status"]
    added     = green
    changed   = red
    untracked = cyan
	
[rebase]
    autosquash = true
    