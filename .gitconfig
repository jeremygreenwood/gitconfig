[include]
    path = ~/.gitconfig-local
    # Note: the above file is intended to contain the following example info:
    #[user]
    #    name  = <your name>
    #    email = <your email>
    #    
    # Typical windows settings:
    #[core]
    #    # Note: if notepad++ is in a different directory, either edit the path below or create a link at the specified directory
    #    editor = \"C:/Program Files (x86)/Notepad++/notepad++.exe\" -multiInst -notabbar -nosession -noPlugin
    #    autocrlf = true
    
[alias]
    #---------------------------------------------------------------
    # Shorthand/simple aliases
    #---------------------------------------------------------------
    a    = add
    ac	 = add *.c              # add all .c files in current directory
    acpp = add *.cpp            # add all .cpp files in current directory
    ah   = add *.h              # add all .h files in current directory
    br   = branch
    bra  = branch --all
    brm  = branch --move
    co   = checkout
    cob  = checkout -b
    com  = checkout master
    cop  = checkout @{-1}		# checkout previously checked out branch
    ci   = commit
    cim  = commit -m
    ciam = commit --all -m
    cif  = commit --fixup=HEAD
    ciaf = commit --all --fixup=HEAD
    cis  = commit --squash=HEAD
    cias = commit --all --squash=HEAD
    cism = commit --squash=HEAD -m
    ciasm= commit --all --squash=HEAD -m
    cp   = cherry-pick
    cpn  = cherry-pick --no-commit
    d    = diff
    dc   = diff --cached
    dw   = diff --word-diff="color"
    dwc  = diff --word-diff="color" --cached
    f    = fetch
    fa   = fetch --all
    fom  = fetch origin master
    lol  = log --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    lolm = log --decorate --pretty=oneline --abbrev-commit HEAD master
    plo  = pull origin
    plom = pull origin master
    pso  = push origin
    pss  = push scratch
    psom = push origin master
    rb   = rebase
    rbi  = rebase --interactive
    rbim = rebase --interactive master
    rcim = commit --amend -m    # overwrite last commit message (recommit)
    rds  = !git reset-demote-staged
    rf   = !git reset-file
    rhd  = reset --hard
    ru   = !git reset-unstaged
    st   = status
    su   = submodule update
    sui  = submodule update --init
    suir = submodule update --init --recursive
    sur  = submodule update --recursive

    #---------------------------------------------------------------
    # Other simple aliases
    #---------------------------------------------------------------
    reset-demote-staged = reset --mixed     # demote all staged changes to unstaged changes
    reset-file          = checkout --       # this only works for unstaged changes
    reset-unstaged      = checkout .
    show-url            = !git remote show origin | grep URL

    #---------------------------------------------------------------
    # Complex and multi-command aliases
    #---------------------------------------------------------------
    # Display a list of aliases
    aliases = !git config --list | grep '^alias' | grep -v ^aliases | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\ \t => \\2/' | sort
	
    # Display a list of aliases beginning with argument string
    aliasesb = !sh -c 'git aliases | grep ^$1' -

    # Add all tracked files to index and show git status
    au   = !git add --update && git status
    
    # Blame functionality- finds a given file path(s) and blames a single line or between a start and end line
    # Usage: git bl <filename> [start] [end]
    # Notes: this requires creating a symbolic link in user home directory pointing to repository file "blame.sh"
    #        this uses an incorrect directory from git bash if in a subdirectory from where git bash is launched
    bl   = !sh -c '~/blame.sh $@' -

    # Branch list all personal branches (l -> local, r -> remote)
    # Note: these requires additional \'s to escape the escapes!
    brapl = !sh -c 'git for-each-ref --sort=-committerdate refs/heads/ | sed \"s,.*refs/heads/\\(.*\\),\\1,\" | grep $( git gpbn )' -
    brapr = !sh -c 'git for-each-ref --sort=-committerdate refs/remotes/origin/ | sed \"s,.*refs/remotes/origin/\\(.*\\),\\1,\" | grep $( git gpbn )' -
	
    # Display the number of commits for each file to see which files are changed most often
    poll-files-commits = !git log --all -M -C --name-only --format='format:' "$@" | sort | grep -v '^$' | uniq -c | sort | awk 'BEGIN {print "count,file"} {print $1 "," $2}'
    
    # Display the number of author line changes for each person to see who is active
    # Note: these requires additional \'s to escape the escapes and "'s
    poll-author-line-changes = !git ls-files -z | xargs -0n1 git blame -w | perl -n -e '/^.*?\\((.*?)\\s+[\\d]{4}/ && print $1,\"\\n\"' | sort -f | uniq -c | sort -n
    
    # Display the number of author commits for each person to see who is active
    poll-author-commits = !git log --all -M -C --format="%an" | sort | grep -v '^$' | uniq -c | sort
    
    # Commit a fixup of previous commit with informational message
    # Notes: this will set the commit to be "fixup" (automatically squashed without comments) when performing an interactive rebase
    cifm = !sh -c 'git commit --fixup=HEAD && LAST_COMMIT=$(git log -n 1 --format=%B) && git commit --amend -m \"$LAST_COMMIT\n\n${1}\"' -
    # Commit all tracked changes as a fixup of previous commit with informational message
    ciafm = !sh -c 'git add --update && git cifm \"${1}\"' -
	
	# Commit undo- reverse last commit and unstage files
	ciu  = !git reset --soft HEAD^ && git reset --mixed
	
    # Create a new branch with prefix of personal branch path
    cobp = !sh -c 'git checkout -b $( git gpbp )/$@' -

    # Get current branch
    gcb  = !git rev-parse --abbrev-ref HEAD

    # Get personal branch name, which is the last name and first initial as one word, all lowercase
    gpbn = !git config user.name | awk '{ print tolower( $NF substr( $1, 0, 1 ) ) }'

    # Get personal branch prefix
    gpbp = !sh -c 'echo personal/$( git gpbn )' -
	
    # Show git log for two commit (SHA) arguments to show order committed
    lcmpcc = !sh -c 'git log | grep \"${1}\\|${2}\"' -
	
    # Show git log for given commit (SHA) argument and most recent commit for given filename argument to show order committed
    lcmpcf = !sh -c 'git log | grep \"${1}\\|$( git log -n 1 --pretty=format:%H -- */${2} )\"' -
	
    # Push current branch to origin repository
    psoc = !sh -c 'git push origin $( git gcb )' -
	
    # Push current branch to specified branch of origin repository
    psocb = !sh -c 'git push origin $( git gcb ):${1}' -
    
    # Force push current branch to origin repository, useful for defeating git hooks which fail git push's --force flag (usefule for backing up to server after rebase)
    # Accomplish this alias using three steps to ensure branch is always present on server to protect against data loss:
    #   1. create temporary branch of current on server
    #   2. remove current branch on server
    #   3. rename temporary branch on server to match the current branch by pushing the desired branch name and then removing the temporary branch
    psocf = !sh -c 'TEMP_BRANCH=$( git gcb )_temp && git psocb $TEMP_BRANCH && git psorc && git psoc && git psorb $TEMP_BRANCH' -
	
    # Push current branch to master of origin repository
    psocm = !git psocb master
	
    # Push current branch to origin repository and prefix with personal branch path
    psocp = !sh -c 'git psocb $( git gpbp )/$( git gcb )' -
    
    # Push nothing to specified branch of origin repository (removes branch on remote)
    psorb = !sh -c 'git push origin :${1}' -
    
    # Push nothing to current branch of origin repository (removes branch on remote)
    psorc = !sh -c 'git psorb $( git gcb )' -
	
    # Push current branch to scratch repository
    pssc = !sh -c 'git push scratch $( git gcb )' -
	
    # Push current branch to specified branch of scratch repository
    psscb = !sh -c 'git push scratch $( git gcb ):${1}' -
	
	# Force push current branch to scratch repository
    psscf = !sh -c 'TEMP_BRANCH=$( git gcb )_temp && git psscb $TEMP_BRANCH && git pssrc && git pssc && git pssrb $TEMP_BRANCH' -
	
    # Push current branch to master of scratch repository
    psscm = !git psscb master
	
    # Push current branch to scratch repository and prefix with personal branch path
    psscp = !sh -c 'git psscb $( git gpbp )/$( git gcb )' -
    
    # Push nothing to specified branch of scratch repository (removes branch on remote)
    pssrb = !sh -c 'git push scratch :${1}' -
    
    # Push nothing to current branch of scratch repository (removes branch on remote)
    pssrc = !sh -c 'git pssrb $( git gcb )' -
	
	# Interactively rebase the last N commits from HEAD
	rbih = !sh -c 'git rebase --interactive HEAD~${1}' -
	
    # Reset Eclipse project files and show git status
    re   = !git reset .project .cproject && git checkout -- .project .cproject && git status
	
    # Update master branch and revert to current branch
    # Notes: this does not work when tree is dirty
    um   = !git fetch origin master && git checkout master && git pull origin master && git checkout @{-1}

[color]
    branch = auto
    diff   = auto
    ui     = auto
    
[color "status"]
    added     = green
    changed   = red
    untracked = cyan
	
[rebase]
    autosquash = true
	
[branch]
    autoSetupRebase = always
